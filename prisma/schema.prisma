// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  username        String           @unique
  email           String?
  password        String
  isAuthenticated Boolean          @default(false)
  userRecipes     UserRecipe[]
  userGroceryLists UserGroceryList[]
  ownedRecipes    Recipe[]         
  ownedGroceryLists GroceryList[] 
}


model Recipe {
  id          Int              @id @default(autoincrement())
  ownerId     Int
  title       String
  serves      Int?
  cookingTime Int?
  cost        Int?
  favourite   Boolean
  color       String
  type        RecipeType       @default(recipe)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  instructions Json[]
  ingredients  Json[]
  ingredientsQuery String[]        
  owner       User             @relation(fields: [ownerId], references: [id])
  userRecipes UserRecipe[]
}

enum RecipeType {
  recipe
}

model GroceryList {
  id          Int              @id @default(autoincrement())
  ownerId     Int
  title       String
  color       String
  type        GroceryType      @default(grocery)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  ingredients Json[]
  owner       User             @relation(fields: [ownerId], references: [id])
  userGroceryLists UserGroceryList[]
}

enum GroceryType {
  grocery
}

model UserRecipe {
  userId     Int
  recipeId   Int
  canEdit    Boolean

  @@id([userId, recipeId])

  user       User             @relation(fields: [userId], references: [id])
  recipe     Recipe           @relation(fields: [recipeId], references: [id])
}

model UserGroceryList {
  userId          Int
  groceryListId   Int
  canEdit         Boolean

  @@id([userId, groceryListId])

  user            User             @relation(fields: [userId], references: [id])
  groceryList     GroceryList      @relation(fields: [groceryListId], references: [id])
}

model Url {
  id        String   @id
  jwtString String
  createdAt DateTime @default(now())
}